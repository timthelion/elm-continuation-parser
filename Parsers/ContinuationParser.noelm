{-
For copyright information see the COPYING file or the end of this file.
-}
module Parsers.ContinuationParser where
{-|
This module provides functions which operate on Parsers and ContinuationParsers(to be found int the Parsers.ContinuationParser.Types module).

# Fundimentals
@docs parse, <|>, return

# Seeking
@docs fastforward

# Errors and end of input
@docs tillEndOfInput, replaceEndOfInputWith, expect

# Continues
@docs continue, markAsEndOfBlock, evaluateContinues, evaluateContinuesTillEndOfBlock
-}
{- base imports -}
import Trampoline
import Either

{- internal modules -}
import Lazzy
import Parsers.ContinuationParser.FinalParserResult as FinalParserResult
import open Parsers.ContinuationParser.Types

{- basic functions -}
{-| This function should be run on any `Parser` from which you would like to create a usable result.  Think of running a parser with the `parse` function line running a monad.
-}
parse: [input] -> Parser input output -> FinalParserResult.FinalParserResult output
parse input parser =
 evaluateContinues (parser input) |> \ result -> 
 case result of
  EndOfInputBeforeResultReached expectation -> FinalParserResult.EndOfInputBeforeResultReached
  ParseError err -> FinalParserResult.ParseError <| showError err
  Parsed output -> FinalParserResult.Parsed output

showError: Error -> String
showError err =
 case err.expected of
  Nothing -> err.message
  Just expected -> err.message++"\n"
                ++ "\tExpected:"++expected

infixl 0 <|>
{-|
This is the standard parser choice operator.  It alows you to say:
 Try the parser on the left,
 and if that fails try the one on the right.

It is a little bit more flexible than parsec's <|>.
Whereas in parsec <|> is LL(1) by default in the elm continuation parser it is LL(k).  The elm continuation parser is satisfied that the choice is not ambiguous when a parser returns Continue.

Notes:
 - take returns Continue at the end of each lexeme by default, so the choice operator is satisfied after a lexeme is eaten.
 - You can do something similar to `try` by using evaluateContinuesTillEndOfBlock along with markAsEndOfBlock to prevent <|> from believing that the choice is unambiguous.
 - If you want this combinator to provide human readable error messages must ensure that all parsers you are choosing from have been labled with the `expect` function.  Many of the built-in Parsers and LexemeEaters are pre-labled.
-}
(<|>) : Parser input output-> Parser input output -> Parser input output
(<|>) p1 p2 input =
 case p1 input of
  Parsed result -> Parsed result
  Continue continuation -> Continue continuation
  ParseError error1 ->
   case p2 input of -- NOTE: When refactoring, don't accidently evaluate p2 before determining that an error has actually occured in p1 and that evaluating p2 is really necessary.
    Parsed result -> Parsed result
    Continue continuation -> Continue continuation
    ParseError error2 -> ParseError <| concatChoiceErrors error1 error2
    EndOfInputBeforeResultReached expected ->
     ParseError <|
      concatChoiceErrors
       error1
       {message = "Unexpected end of input."
       ,expected = expected}
  EndOfInputBeforeResultReached expected1 ->
   case p2 input of
    Parsed result -> Parsed result
    Continue continue -> Continue continue
    ParseError error ->
     ParseError
      <| concatChoiceErrors
          {message = "Unexpected end of input."
          ,expected = expected1}
          error
    EndOfInputBeforeResultReached expected2 ->
     ParseError
      <| concatChoiceErrors
           {message = "Unexpected end of input."
           ,expected = expected1}
           {message = "Unexpected end of input."
           ,expected = expected2}

concatChoiceErrors: Error -> Error -> Error
concatChoiceErrors error1 error2 =
 case error1.expected of
  Just expected ->
   {message = "Cannot determine what comes next. The following parsers where tried and all of them failed.\n"
           ++ showChoiceError error1
           ++ showChoiceError error2
   ,expected = Nothing}
  Nothing ->
   {message = error1.message
           ++ showChoiceError error2
   ,expected = Nothing}

showChoiceError: Error -> String
showChoiceError err =
 case err.expected of
  Just expected -> "*\""++expected++"\" failed with:\n"
                ++ "\t"++err.message++"\n"
  Nothing -> "* Programmer error, unlabled parser used with the choice operator.  This parser returned the following error:\n" ++ err.message ++ "\n"

{-| Create a parser which ignores its input and returns the given result directly. -}
return: ParserResult input output -> Parser input output
return result _ = result

{- seeking -}
{-| Remove a n characters/tokens from the input -}
fastforward: Int -> Parser input output -> Parser input output
fastforward n parser input =
 if | n == 0 -> parser input
    | otherwise ->
       case input of
        (i::is) -> fastforward (n-1) parser is
        [] -> EndOfInputBeforeResultReached <| Just <| "at least " ++ show n ++ " more characters in the input."

{- errors and end of input -}
{-| Parse till end of input, when end of input is reached return the given ParserResult.  Good for error checks. -}
tillEndOfInput: ParserResult input output -> Parser input ignoredOutput -> Parser input output
tillEndOfInput result parser input =
 case evaluateContinues <| parser input of
  EndOfInputBeforeResultReached _ -> result
  ParseError err -> ParseError err
  Parsed _ -> {- This shouldn't happen -} ParseError {message = "Programmer error: End of input parsers should not return a result.", expected = Nothing}

{-|
If the end of input is reached before a certain continuation parser goes onto its continuation, return the given ParserResult instead of EndOfInputBeforeResultReached.
-}
replaceEndOfInputWith: ContinuationParser input intermediate output -> ParserResult input output -> ContinuationParser input intermediate output
replaceEndOfInputWith continuationParser result continuation input =
 case evaluateContinuesTillEndOfBlock <| continuationParser (markAsEndOfBlock continuation) input of
  EndOfInputBeforeResultReached _ -> result
  Continue value -> Lazzy.evaluate value.continuation -- Evaluate end of block marker
  otherCases -> otherCases

expect: String -> Parser input output -> Parser input output
expect expectation parser input =
 case parser input of
  Parsed result -> Parsed result
  Continue continuation -> Continue continuation
  ParseError err -> ParseError {err|expected <- Just <| expectation}
  EndOfInputBeforeResultReached _ -> EndOfInputBeforeResultReached <| Just expectation

{- Continues -}
{-| Create a Continue of the given type -}
continue: ContinueType -> Parser input output -> [input] -> ParserResult input output
continue ctype parser input =
 Continue
  {ctype=ctype
  ,continuation = Lazzy.computeLater parser input}

{-|
Mark a continuation as the end of a block.
-}
markAsEndOfBlock: Continuation input intermediate output -> Continuation input intermediate output
markAsEndOfBlock continuation intermediate = continue EndOfBlock <| continuation intermediate

{-| Evaluate all Continues returning a fully evaluated ParserResult -}
evaluateContinues: ParserResult input output -> ParserResult input output
evaluateContinues result =
 let
  --makeTrampoline: ParserResult input output -> Trampoline (ParserResult input output)
  makeTrampoline result =
  case result of
    Continue value -> Trampoline.Trampoline . Either.Left <| \_-> makeTrampoline <| Lazzy.evaluate value.continuation
    _ -> Trampoline.Trampoline . Either.Right <| result
 in
 Trampoline.trampoline <| makeTrampoline result
  

{-| Evaluate all Continues untill an EndOfBlock is reached. Then return it, unevaluated. -}
evaluateContinuesTillEndOfBlock: ParserResult input output -> ParserResult input output
evaluateContinuesTillEndOfBlock result =
 let
  --makeTrampoline: ParserResult input output -> Trampoline (ParserResult input output)
  makeTrampoline result =
   case result of
    Continue value ->
     if | value.ctype == EndOfBlock -> Trampoline.Trampoline . Either.Right <| Continue value
        | otherwise -> Trampoline.Trampoline . Either.Left <| \_-> makeTrampoline <| Lazzy.evaluate value.continuation
    _ -> Trampoline.Trampoline . Either.Right <| result
 in
 Trampoline.trampoline <| makeTrampoline result

{-
The continuation parser
Parsec inspired continuation passing style parser

    Copyright (C) 2013  Timothy Hobbs <timothyhobbs@seznam.cz> thobbs.cz

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library.
-}