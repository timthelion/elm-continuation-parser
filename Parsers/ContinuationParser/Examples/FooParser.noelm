{- Copyright info at end of file -}
module  Parsers.ContinuationParser.Examples.FooParser where

import open Parsers.ContinuationParser
import Parsers.ContinuationParser as CP
import open Parsers.ContinuationParser.Types
import open Parsers.ContinuationParser.Take
import open Parsers.ContinuationParser.LexemeEaters
import Parsers.ContinuationParser.LexemeEaters as LE
import open Parsers.ContinuationParser.PositionMarking
import open Parsers.ContinuationParser.Specifics.Lexemes
import Parsers.ContinuationParser.FinalParserResult as FinalParserResult

import String

t = standardTaker

data Foo = Bar | Baz

parseFooUnblocked: String -> FinalParserResult.FinalParserResult Foo
parseFooUnblocked input =
 parse
  (charsToPositionMarkedChars <| String.toList input)
  parseFooUnblocked'

parseFooUnblocked': Parser (PositionMarked Char) Foo
parseFooUnblocked' =
 (t.take (exactStringMatch "Foo") <|\_->
  t.take (exactStringMatch "Bar") <|\_-> return <| Parsed Bar)
        <|>
 (t.take (exactStringMatch "Foo") <|\_->
  t.take (exactStringMatch "Baz") <|\_-> return <| Parsed Baz)

parseFooBlocked: String -> FinalParserResult.FinalParserResult Foo
parseFooBlocked input =
 parse
  (charsToPositionMarkedChars <| String.toList input)
  parseFooBlocked'

parseFooBlocked': Parser (PositionMarked Char) Foo
parseFooBlocked' =
 (\i->evaluateContinuesTillEndOfBlock 
  ((t.take (exactStringMatch "Foo") <|\_->
   t.take (exactStringMatch "Bar") <| markAsEndOfBlock <|\_-> return <| Parsed Bar) i))
        <|>
 (\i->evaluateContinuesTillEndOfBlock -- Not strictly needed, but will produce nicer errors.
  ((t.take (exactStringMatch "Foo") <|\_->
   t.take (exactStringMatch "Baz") <| markAsEndOfBlock <|\_-> return <| Parsed Baz) i))