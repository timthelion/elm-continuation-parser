module  Parsers.ContinuationParser.Examples.LispyListTutorial.LispyLists where

import Parsers.ContinuationParser.Examples.LispyListParser as LispyListParser

import Parsers.ContinuationParser.Examples.FieldExtras as FieldExtras

parsingLispyLists = flow down [[markdown|
## Parsing LISP

While parsing user data is good fun, I still haven't demonstrated that the `elm-continuation-parser` can be used for "real work".  Why don't we parse something more interesting. Say LISP.  I choose lisp as my test case for parsing libraries because its syntax is simple and unambiguous, yet parsing it requires most of the same features used when parsing more syntactically complex languages such as Haskell or Elm.

While our last example looked like a single block of somewhat ugly do-notation, this example is going to require multiple functions and recursion.

### Input

Take a short snippet of lisp code
|],[markdown|
````
(hello world (this is a test) 1 2 3 4.5)
````
|],[markdown|
In the world of lisp, this is a hetrogeneous list containing 7 atoms:

 - 2 symbols
 - 1 list
 - 4 numbers

The list:
|],[markdown|
````
("Hello there this is a test.")
````
|],[markdown|
Contains just one atom, a single string.

It is also important to note, that a lisp file such as
|],[markdown|
````

Hello bar baz (boo) 23

````
|],[markdown|
is invalid, becuse not all of the atoms are contained within a list.

### Our output
|],[markdown|
````
data LispyList
 = List [LispyList]
 | Symbol String
 | Number Float
 | LispyString String
````
|],[markdown|
### The tasks of the LispyList parser

This leaves our lispylist parser the following tasks:

 - Consume input that is outside a lispy list, throwing errors unless it is whitespace, a comment or the beginning of a lispy list.
 - Ignore everything that falls between a ';' and a '\n' as a comment, unless the ';' falls within a quoted String.
 - Consume top level lispy lists
  + Consume comments
  + Strings
  + Numbers
  + Symbols
  + Embeded lispy Lists
  + All while ignoring comments

### Imports

The imports are much the same as with our earlier example:
|],[markdown|
````
import open Parsers.ContinuationParser
import Parsers.ContinuationParser as CP
import open Parsers.ContinuationParser.Types
import open Parsers.ContinuationParser.Take
import open Parsers.ContinuationParser.PositionMarking
import open Parsers.ContinuationParser.LexemeEaters
import Parsers.ContinuationParser.LexemeEaters as LE
import open Parsers.ContinuationParser.Specifics.Lexemes
import open Parsers.ContinuationParser.Specifics.ContinuationParsers
import open Parsers.CharacterClassification
import Parsers.ContinuationParser.FinalParserResult as FinalParserResult

import Char
import String
import List
````
|],[markdown|
However there are two continuation-parser module's that I did not talk about previously:
|],[markdown|
````
import open Parsers.ContinuationParser.Specifics.ContinuationParsers
import open Parsers.CharacterClassification
````
|],[markdown|
The `ContinuationParsers` module is intended to provide generic `ContinuationParser`s.  As of this writing it includes only one and that is the `takeString` parser.  This takes a quoted string, dealing with standard backslashed escape sequences.

The `CharsetClassification` module provides functions like `isWhitespace` and `isLetter` that didn't make their way into the standard `Char` library.

### Boilerplate

Just as before, we define `t` as our taker:

````
t = standardTaker
````

### Our main function
Our main function looks much like the main function in the previous example.
|],[markdown|
````
parseLispyListFile: String ->  FinalParserResult.FinalParserResult [LispyList]
parseLispyListFile input
 = parse
    (charsToPositionMarkedChars <| String.toList input)
    (parseTopLevelLispyLists [])

````
|],[markdown|
The only interesting thing here, is that we are passing an empty accumulator to `parseTopLevelLispyLists`.

**Our next function** is much more interesting.

In `parsec`'s terms, this function would probably be something along the lines of:
|],[markdown|
````
do
 lispyLists <- many  $ do { _ <- whitespaceAndComments; lispyList}
 _ <- whitespaceAndComments
 eof
 return lispyLists
````
|],[markdown|
Rather than using monadic carying of state like in parsec, with the continuation parser we use recursion:
|],[markdown|
````
parseTopLevelLispyLists:
    [LispyList]
 -> Parser (PositionMarked Char) [LispyList]
parseTopLevelLispyLists acc =
      t.take whitespace `replaceEndOfInputWith` (Parsed acc)
   <| \ _ ->
    ((comment ";" `replaceEndOfInputWith` (Parsed acc) <| \ _ -> parseTopLevelLispyLists acc)
             <|>
    (takeLispyList
         <| \ list -> parseTopLevelLispyLists (acc++[list])))
````
|],[markdown|
In this excerpt we take some `whitespace` and stop at the first non-whitespace character in our input to the name transition.  We then make a choice:

 - If the next thing in the input is a semicolon ';', the `comment` lexeme tells <|> that it can `Continue` unambiguously.  The comment lexeme reads its given marker and then reads till the end of the line.  We then ignore any intermediate value that the `comment` lexeme created(the comment's text) and go on to run `parseTopLevelLists` on the remainder of the input.  If our file consisted mearly of comments and whitespace then we would continue looping like this untill the end of the input.

 - If the next thing in the input is '(', then we eat the '(' and then we call the `takeLispyList` function.  The `takeLispyList` function provides a `LispyList` as its intermediate value. The continuation passed to `takeLispyList` is a recursive call back to `parseTopLevelLispyLists`. The whole point of our parser is to convert a `String` to a `[LispyList]`. So now we have a `LispyList` which we add to `acc`. And we continue looking for more top level lispy lists.

 - If the next input is neither a semicolon nor an open parenthesis we return an error.

When we take `whitespace` or a `comment` it is possible, that rather than the LexemeEater "ending" we could run into the EndOfInput instead.  The `replaceEndOfInputWith` function tries to run a `ContinuationParser` but if it reaches the end of the input before the parser completes, it returns a given fallback value instead.  ````t.take whitespace `replaceEndOfInputWith` (Parsed acc) continuation```` means that if the input consists only of whitespace up till the end of the input then we return (Parsed acc), however, if the whitespace lexeme "completes"(if we find something other than whitespace) then we go on to the continuation.  Here, if the only thing left in our file is whitespace or a comment, we are done and we return the accumulated `[LispyLists]`.

The `markEndOfInputAsErrorAt` function takes a ContinuationParser and an error message and returns a ContinuationParser which evaluates to the error message(with appropriate line numbers) if the end of input is reached before the continuation is reached.  In this case, if the end of input is reached before the lispylist has finished being taken, a close paren error is displayed.

**The `takeLispyList` function** is the workhorse of our parser:
|],[markdown|
````
takeLispyList: ContinuationParser (PositionMarked Char) LispyList [LispyList]
takeLispyList continuation =
 t.take (LE.expect "parenthesized list" <| exactMatch ['(']) <| \ _ ->
 ((takeLispyList' []) `markEndOfInputAsErrorAt`
   {message  = "Matching close parethesis not found for parenthesized block."
   ,expected = Just "more list items or close parenthesis."}) continuation
 
takeLispyList': [LispyList] -> ContinuationParser (PositionMarked Char) LispyList [LispyList]
takeLispyList' acc continuation =
  t.take whitespace <| \ _ ->
   ((comment ";"
       <| \ _ -> takeLispyList' acc continuation)
   <|> (takeString
       <| \ string -> takeLispyList' (acc++[LispyString string]) continuation)
   <|> (takeLispyList
       <| \ list -> takeLispyList' (acc++[list]) continuation)
   <|> (t.take (exactMatch [')'])
       <| \ _ -> continuation (List acc))
   <|> (  CP.expect "float"
       <| t.disambiguate Char.isDigit
       <| t.take float
       <| \ number' -> takeLispyList' (acc++[Number number']) continuation)
   <|> (t.take lispySymbol
       <| \ symbol -> takeLispyList' (acc++[Symbol symbol]) continuation))
````
|],[markdown|
There is surprisingly little new here. The only thing of note in this function is the seccond to last case: `t.disambiguate Char.isDigit`.

 - `t.disambiguate` disambiguates in the old parsec LL(1) fassion on the basis of a single character.  Why do we use it here?  Certainly `t.take float` is enough.  Indeed it is, but we want to provide our user with nice error messages.  If they type in "( 1. hello)" we don't want to list for them all the different things <|> tried.  We simply want to tell them that parsing the number failed.
|],[markdown|
````
lispySymbol: LexemeEater Char String
lispySymbol = LE.expect "name or other symbol" <|
 symbol
  (\c->isWhitespace c || c == ')' || c == '(' || Char.isDigit c || c == '\"' || c == ';')
````
|],[markdown|
You can try out our new LispyList parser bellow ([Source](https://github.com/timthelion/elm-continuation-parser/blob/master/src/Parsers/ContinuationParser/Examples/LispyListParser.noelm)):
|]]

(lispyListParserField,lispyListParserInput) =
 FieldExtras.fieldMultilineWithDefaultText
  "Enter some lisp to be parsed here."
  "(This is (not a list) (but a tree)) \n (\"You see?\" (1 (2 (3 (4 (5.6))))))"

lispyListParserOutput = (\input->asText <| LispyListParser.parseLispyListFile input) <~ lispyListParserInput