module Parsers.ContinuationParser.Examples.LispyListTutorial.EndNotes where

endNotes = [markdown|
# End notes

 - Why put settings in this wierd `Taker` object rather than use a monad?
  Monads allow you to emulate mutable state. Indeed, a monad gives you all the poser and pain of a single threaded mutable state. If our settings were sotred in a monadic state named Parser then any function running in the Parser monad could change those settings.  By putting our settings into a global imutable value, our `Taker`, we guarantee the users of elm-continuation-parser that these settings will never unexpectedly change.

 - License: This library was origionally licnesed under the AGPLv 3.0. However, when I got to thinking about the various possible uses of this libarary, for example as a component of some future effort to translate the Elm compiler to Elm, I realised that AGPL would be problematic.  I am a firm supporter of free software, but to a great extent I am such a supporter because I believe that it is bad when the law interferes with technological development. I thus chose to license my work under the LGPLv3.0. I beleive that this license ins fundamentally fair.  It allows me to decide what happens with my code while allowing you to decide what happens with yours.
|]