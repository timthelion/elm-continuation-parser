module Parsers.ContinuationParser.Examples.LispyListTutorial.BasicTypes where

basicTypes = flow down [[markdown|
# The basic types

The continuation parser is a library which helps you create Parsers.  It takes inspiration from the Haskell [Parsec](http://hackage.haskell.org/package/parsec) library in that these parsers consist of strings of "input consumers" which produce intermediate values.

The basic parser type is:
|]
 ,[markdown|

````
type Parser input output = [input] -> ParserResult input output
````

|]
 ,[markdown|

where

|]
 ,[markdown|

````
data ParserResult input output
 = Parsed output
 | ParseError String
 | EndOfInputBeforeResultReached
 | Continue {ctype:ContinueType,continuation:Lazy [input] (ParserResult input output)}

data ContinueType
 = Unambiguous
 | EndOfBlock
````
|]
 ,[markdown|

Unlike parsec, the continuation parser is written in continuation passing style rather than monadic style.

Rather than stringing together ParsecTs with the monadic bind we string together Continuations. Continuations are just functions which take yet to be consumed input.  There is no universal `bind` or `>>=`.  Rather any function of type ContinuationParser can be passed a continuation.
|]
 ,[markdown|

````
type ContinuationParser input intermediate output
 = (Continuation input intermediate output) -> Parser input output
````
|]
 ,[markdown|

ContinuationParsers always:

 - Consume some input
 - Produce an intermediate value
  - Call a continuation funciton
    + Passing it the intermediate value
 - Return the value of the continuation
|]
 ,[markdown|

````
type Continuation input intermediate opinion output
 = intermediate -> opinion -> Parser input output
````
|]
 ,[markdown|

A Continuation is just a function which takes an intermediate value and some input. It produces a ParserResult.

The most commonly used type of ContinuationParsers is produced by the `take` function.
|]
 ,[markdown|

````
take: LexemEater input intermediate
    -> ContinuationParser input intermediate output
````

````
type LexemeEater input output
 = [input] -> input -> EatenLexeme output

data EatenLexeme output
 = EatenLexeme output
 | LexemeError String
 | IncompleteLexeme
````
Here is an example LexemeEater:

````
whitespace: LexemeEater Char [Char]
whitespace consumed input =
 if | isWhitespace input -> IncompleteLexeme
    | otherwise -> EatenLexeme consumed
````
|]
 ,[markdown|

This tells `take` that while the input(the next character in the input stream) isWhitespace, continue consuming input.  Once we see that the next character in the input stream is NOT whitespace, pass on the whitespace we just consumed to the Continuation as an intermediate value.

Of course, there was a bit of boiler-plate in there.  Rather than writing that code out, we can write the `whitespace` LexemeEater using the `charset` function in `Parsers.ContinuationParser.LexemeEaters`:
|]
 ,[markdown|

````
whitespace = charset isWhitespace
````
|]
 ,[markdown|

**Finally** I'd like to point out that `Parser`s are run on input using the `parse` function:
|]
 ,[markdown|

````
parse: [input] -> Parser input output -> FinalParserResult.FinalParserResult input output
````
|]
 ,[markdown|

A `FinalParserResult` is the same as `ParserResult`, but it does not contain the `Continue` case(to be explained later).
|]
 ,[markdown|

````
data FinalParserResult output
 = Parsed output
 | ParseError String
 | EndOfInputBeforeResultReached
````

|]]